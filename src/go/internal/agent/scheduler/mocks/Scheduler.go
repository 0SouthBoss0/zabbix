/*
** Copyright (C) 2001-2025 Zabbix SIA
**
** This program is free software: you can redistribute it and/or modify it under the terms of
** the GNU Affero General Public License as published by the Free Software Foundation, version 3.
**
** This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
** without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
** See the GNU Affero General Public License for more details.
**
** You should have received a copy of the GNU Affero General Public License along with this program.
** If not, see <https://www.gnu.org/licenses/>.
**/
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockscheduler

import (
	agent "golang.zabbix.com/agent2/internal/agent"
	glexpr "golang.zabbix.com/agent2/pkg/glexpr"

	mock "github.com/stretchr/testify/mock"

	resultcache "golang.zabbix.com/agent2/internal/agent/resultcache"

	scheduler "golang.zabbix.com/agent2/internal/agent/scheduler"

	time "time"
)

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

// FinishTask provides a mock function with given fields: task
func (_m *Scheduler) FinishTask(task interface{}) {
	_m.Called(task)
}

// PerformTask provides a mock function with given fields: key, timeout, clientID
func (_m *Scheduler) PerformTask(key string, timeout time.Duration, clientID uint64) (*string, error) {
	ret := _m.Called(key, timeout, clientID)

	if len(ret) == 0 {
		panic("no return value specified for PerformTask")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, uint64) (*string, error)); ok {
		return rf(key, timeout, clientID)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration, uint64) *string); ok {
		r0 = rf(key, timeout, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration, uint64) error); ok {
		r1 = rf(key, timeout, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: command
func (_m *Scheduler) Query(command string) string {
	ret := _m.Called(command)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QueryUserParams provides a mock function with no fields
func (_m *Scheduler) QueryUserParams() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueryUserParams")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateCommands provides a mock function with given fields: clientID, writer, commands, now
func (_m *Scheduler) UpdateCommands(clientID uint64, writer resultcache.Writer, commands []*agent.RemoteCommand, now time.Time) {
	_m.Called(clientID, writer, commands, now)
}

// UpdateTasks provides a mock function with given fields: clientID, writer, firstActiveChecksRefreshed, expressions, requests, now
func (_m *Scheduler) UpdateTasks(clientID uint64, writer resultcache.Writer, firstActiveChecksRefreshed bool, expressions []*glexpr.Expression, requests []*scheduler.Request, now time.Time) {
	_m.Called(clientID, writer, firstActiveChecksRefreshed, expressions, requests, now)
}

// NewScheduler creates a new instance of Scheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scheduler {
	mock := &Scheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
