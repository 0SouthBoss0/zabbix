diff --git a/ui/js/main.js b/ui/js/main.js
index 62520d5509a..46fc42e6a43 100644
--- a/ui/js/main.js
+++ b/ui/js/main.js
@@ -516,27 +516,27 @@ var hintBox = {
 
 		const element = target instanceof jQuery ? target[0] : target;
 
-		const target_box_initial = element.getBoundingClientRect();
-		const x_initial = target_box_initial.x;
-		const y_initial = target_box_initial.y;
-
-		element.observer = new MutationObserver(() => {
-			const target_box_new = element.getBoundingClientRect();
-			const x_new = target_box_new.x;
-			const y_new = target_box_new.y;
-
-			if (!isVisible(element) || x_new !== x_initial || y_new !== y_initial) {
-				hintBox.deleteHint(element);
-
-				const closest_dialogue = element.closest('.overlay-dialogue-body');
-				const scroll_parent = closest_dialogue !== null ? closest_dialogue : jQuery(element).scrollParent()[0];
-
-				scroll_parent.removeEventListener('scroll', hintBox.onParentScroll);
-				delete scroll_parent.has_scroll_listener;
+		// const target_box_initial = element.getBoundingClientRect();
+		// const x_initial = target_box_initial.x;
+		// const y_initial = target_box_initial.y;
+
+		target.observer = new MutationObserver(() => {
+			// const target_box_new = element.getBoundingClientRect();
+			// const x_new = target_box_new.x;
+			// const y_new = target_box_new.y;
+
+			if (!isVisible(element) /*|| x_new !== x_initial || y_new !== y_initial*/) {
+				hintBox.deleteHint(target);
+
+				// const closest_dialogue = element.closest('.overlay-dialogue-body');
+				// const scroll_parent = closest_dialogue !== null ? closest_dialogue : jQuery(element).scrollParent()[0];
+				//
+				// scroll_parent.removeEventListener('scroll', hintBox.onParentScroll);
+				// delete scroll_parent.has_scroll_listener;
 			}
 		});
 
-		element.observer.observe(document.body, {
+		target.observer.observe(document.body, {
 			attributes: true,
 			attributeFilter: ['style', 'class'],
 			subtree: true,
@@ -564,26 +564,34 @@ var hintBox = {
 					hintBox.positionElement(e, target, target.hintBoxItem);
 				});
 			}
-		}
 
-		const closest_dialogue = target.closest('.overlay-dialogue-body');
-		const scroll_parent = closest_dialogue !== null ? closest_dialogue : jQuery(target).scrollParent()[0];
+			const element = target instanceof jQuery ? target[0] : target;
+			const element_rect_initial = element.getBoundingClientRect();
+
+			target.scrollObserver = {
+				x: element_rect_initial.x,
+				y: element_rect_initial.y,
+				callback: (e) => hintBox.onScroll(target, e)
+			};
 
-		if (!scroll_parent.has_scroll_listener) {
-			scroll_parent.addEventListener('scroll', hintBox.onParentScroll);
-			scroll_parent.has_scroll_listener = true;
+			addEventListener('scroll', target.scrollObserver.callback, {capture: true});
 		}
 	},
 
-	onParentScroll: function(e) {
-		const hints = e.target.querySelectorAll('[data-hintbox-static="1"][data-expanded="true"]');
+	onScroll(target, e) {
+		const element = target instanceof jQuery ? target[0] : target;
+		const element_rect_current = element.getBoundingClientRect();
+
+		if (e.target.classList.contains('wrapper')) {
+			target.scrollObserver.x = element_rect_current.x;
+			target.scrollObserver.y = element_rect_current.y;
 
-		for (const hint of hints) {
-			hintBox.deleteHint(hint);
+			return;
 		}
 
-		e.target.removeEventListener('scroll', hintBox.onParentScroll);
-		delete e.target.has_scroll_listener;
+		if (element_rect_current.x !== target.scrollObserver.x || element_rect_current.y !== target.scrollObserver.y) {
+			hintBox.deleteHint(target);
+		}
 	},
 
 	showHint: function(e, target, hintText, className, isStatic, styles) {
@@ -695,6 +703,12 @@ var hintBox = {
 
 			delete target.observer;
 		}
+
+		if (target.scrollObserver !== undefined) {
+			removeEventListener('scroll', target.scrollObserver.callback, {capture: true});
+
+			delete target.scrollObserver;
+		}
 	},
 
 	deleteAll: () => {
